{"version":3,"sources":["components/app-container/AppContainer.jsx","components/app-container/index.js","datas/current-user/current-user-queries.js","hooks/use-current-user/index.js","hooks/use-current-user/useCurrentUser.js","components/private-route/index.js","components/private-route/PrivateRoute.jsx","components/public-route/index.js","components/public-route/PublicRoute.jsx","scenes/home/Home.jsx","scenes/home/index.js","components/text/Text.jsx","components/text/index.js","components/button/Button.jsx","components/button/index.js","scenes/sign-in/SignIn.jsx","scenes/sign-in/index.js","App.jsx","configurations/client/configureClient.js","serviceWorker.js","index.js"],"names":["AppContainer","styled","div","currentUserQueries","GET_CURRENT_USER","gql","useCurrentUser","useQuery","loading","error","data","me","PrivateRoute","children","others","id","render","to","PublicRoute","HomeContainer","Home","Text","size","weight","color","defaultProps","propTypes","PropTypes","oneOf","Button","button","SignInContainer","SignInText","SignInButton","SignIn","onClick","window","location","href","process","client","ApolloClient","uri","credentials","configureClient","App","exact","path","Boolean","hostname","match","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"ibAEA,ICAeA,EDAMC,IAAOC,IAAV,K,+JEAlB,IAUeC,EAVY,CACzBC,iBAAkBC,YAAF,MCDHC,ECCQ,WAAO,IAAD,EACMC,YAC/BJ,EAAmBC,kBADbI,EADmB,EACnBA,QAASC,EADU,EACVA,MAAOC,EADG,EACHA,KAIxB,OAAIF,GAAWC,EACN,CAAED,UAASC,SAKb,aAAED,UAASC,SAAUC,EAAKC,KCZpBC,ECGM,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,SAAaC,EAAa,8BACxBR,IAAhBE,EADwC,EACxCA,QAASO,EAD+B,EAC/BA,GAEjB,OACE,kBAAC,IAAD,iBAEMD,EAFN,CAGEE,OAAQ,WACN,OAAIR,EAAgB,KAEhBO,EAAWF,EAER,kBAAC,IAAD,CAAUI,GAAG,kBCfbC,ECGK,SAAC,GAA6B,IAA3BL,EAA0B,EAA1BA,SAAaC,EAAa,8BACvBR,IAAhBE,EADuC,EACvCA,QAASO,EAD8B,EAC9BA,GAEjB,OACE,kBAAC,IAAD,iBAEMD,EAFN,CAGEE,OAAQ,WACN,OAAIR,EAAgB,KAEfO,EAEE,kBAAC,IAAD,CAAUE,GAAG,MAFJJ,O,qICXxB,IAAMM,EAAgBlB,IAAOC,IAAV,KCFJkB,EDQF,kBACX,kBAACD,EAAD,O,+FERF,IAAME,EAAOpB,IAAOC,IAAV,KACN,YAA8B,IAA3BoB,EAA0B,EAA1BA,KAAMC,EAAoB,EAApBA,OAAQC,EAAY,EAAZA,MACjB,MAAM,2FAAN,OAIeF,EAJf,mCAKiBC,EALjB,oDAOWC,EAPX,cAYJH,EAAKI,aAAe,CAClBH,KAAM,GACNC,OAAQ,IACRC,MAAO,SAGTH,EAAKK,UAAY,CACfJ,KAAMK,IAAUC,MAAM,CAEpB,GACA,GACA,KAEFL,OAAQI,IAAUC,MAAM,CAEtB,IACA,MAEFJ,MAAOG,IAAUC,MAAM,CAErB,QACA,UAIWP,ICxCAA,EDwCAA,E,2OExCf,IAAMQ,EAAS5B,IAAO6B,OAAV,KAaZD,EAAOJ,aAAe,GAEtBI,EAAOH,UAAY,GAEJG,ICjBAA,EDiBAA,E,8TEdf,IAAME,EAAkB9B,IAAOC,IAAV,KAIf8B,EAAa/B,YAAOoB,EAAPpB,CAAH,KAIVgC,EAAehC,YAAO4B,EAAP5B,CAAH,KCXHiC,EDiBA,WAMb,OACE,kBAACH,EAAD,KACE,kBAAC,EAAD,CAAMT,KAAM,GAAIC,OAAQ,IAAKC,MAAM,SAAnC,WAIA,kBAACQ,EAAD,CAAYR,MAAM,QAAlB,uCAIA,kBAACS,EAAD,CAAcE,QAfI,WAEpBC,OAAOC,SAASC,KAAhB,UAA0BC,oDAA1B,mBAcI,kBAAC,EAAD,CAAMjB,KAAM,GAAIC,OAAQ,KAAxB,4BE1BFiB,ECRkB,kBACtB,IAAIC,IAAa,CACfC,IAAI,GAAD,OAAKH,oDAAL,YACHI,YAAa,YDKFC,GAmBAC,EAjBH,WACV,OACE,kBAAC,IAAD,CAAgBL,OAAQA,GACtB,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,EAAD,CAAcM,OAAK,EAACC,KAAK,KACvB,kBAAC,EAAD,OAEF,kBAAC,EAAD,CAAaA,KAAK,YAChB,kBAAC,EAAD,WETQC,QACW,cAA7BZ,OAAOC,SAASY,UAEe,UAA7Bb,OAAOC,SAASY,UAEhBb,OAAOC,SAASY,SAASC,MACvB,2D,MCVNC,IAASnC,OACP,kBAAC,IAAMoC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApD,GACLqD,QAAQrD,MAAMA,EAAMsD,c","file":"static/js/main.cb62f9f4.chunk.js","sourcesContent":["import styled from \"styled-components\";\n\nconst AppContainer = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100vw;\n  height: 100vh;\n  background-color: #212330;\n`;\n\nexport default AppContainer;\n","import AppContainer from \"./AppContainer\";\n\nexport default AppContainer;\n","import { gql } from \"apollo-boost\";\n\nconst currentUserQueries = {\n  GET_CURRENT_USER: gql`\n    {\n      me {\n        id\n      }\n    }\n  `,\n};\n\nexport default currentUserQueries;\n","import useCurrentUser from \"./useCurrentUser\";\n\nexport default useCurrentUser;\n","import { useQuery } from \"@apollo/react-hooks\";\nimport { currentUserQueries } from \"../../datas/current-user\";\n\nconst useCurrentUser = () => {\n  const { loading, error, data } = useQuery(\n    currentUserQueries.GET_CURRENT_USER\n  );\n\n  if (loading || error) {\n    return { loading, error };\n  }\n\n  // This shouldn't be done that way!\n\n  return { loading, error, ...data.me };\n};\n\nexport default useCurrentUser;\n","import PrivateRoute from \"./PrivateRoute\";\n\nexport default PrivateRoute;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport useCurrentUser from \"../../hooks/use-current-user\";\n\nconst PrivateRoute = ({ children, ...others }) => {\n  const { loading, id } = useCurrentUser();\n\n  return (\n    <Route\n      // eslint-disable-next-line\n      {...others}\n      render={() => {\n        if (loading) return null;\n\n        if (id) return children;\n\n        return <Redirect to=\"/sign-in\" />;\n      }}\n    />\n  );\n};\n\nPrivateRoute.propTypes = { children: PropTypes.node.isRequired };\n\nexport default PrivateRoute;\n","import PublicRoute from \"./PublicRoute\";\n\nexport default PublicRoute;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Route, Redirect } from \"react-router-dom\";\nimport useCurrentUser from \"../../hooks/use-current-user\";\n\nconst PublicRoute = ({ children, ...others }) => {\n  const { loading, id } = useCurrentUser();\n\n  return (\n    <Route\n      // eslint-disable-next-line\n      {...others}\n      render={() => {\n        if (loading) return null;\n\n        if (!id) return children;\n\n        return <Redirect to=\"/\" />;\n      }}\n    />\n  );\n};\n\nPublicRoute.propTypes = { children: PropTypes.node.isRequired };\n\nexport default PublicRoute;\n","import React from \"react\";\n\nimport styled from \"styled-components\";\n\nconst HomeContainer = styled.div`\n  width: 100px;\n  height: 100px;\n  background-color: blue;\n`;\n\nconst Home = () => (\n  <HomeContainer>\n    {}\n    {}\n  </HomeContainer>\n);\n\nexport default Home;\n","import Home from \"./Home\";\n\nexport default Home;\n","import PropTypes from \"prop-types\";\nimport styled from \"styled-components\";\n\nconst Text = styled.div`\n  ${({ size, weight, color }) => {\n    return `\n      margin: 0px;\n      padding: 0px;\n      font-family: Roboto;\n      font-size: ${size}px;\n      font-weight: ${weight};\n      line-height: 1.5;\n      color: ${color};\n    `;\n  }}\n`;\n\nText.defaultProps = {\n  size: 16,\n  weight: 400,\n  color: \"white\",\n};\n\nText.propTypes = {\n  size: PropTypes.oneOf([\n    // eslint-disable-line\n    16,\n    18,\n    24,\n  ]),\n  weight: PropTypes.oneOf([\n    // eslint-disable-line\n    400,\n    700,\n  ]),\n  color: PropTypes.oneOf([\n    // eslint-disable-line\n    \"white\",\n    \"grey\",\n  ]),\n};\n\nexport default Text;\n","import Text from \"./Text\";\n\nexport default Text;\n","import styled from \"styled-components\";\n\nconst Button = styled.button`\n  margin: 0px;\n  padding: 0px;\n  border: unset;\n  border-radius: 8px;\n  outline: unset;\n  cursor: pointer;\n\n  &:hover {\n    filter: brightness(105%);\n  }\n`;\n\nButton.defaultProps = {};\n\nButton.propTypes = {};\n\nexport default Button;\n","import Button from \"./Button\";\n\nexport default Button;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport Text from \"../../components/text\";\nimport Button from \"../../components/button\";\n\nconst SignInContainer = styled.div`\n  margin: auto;\n`;\n\nconst SignInText = styled(Text)`\n  margin-bottom: 20px;\n`;\n\nconst SignInButton = styled(Button)`\n  width: 500px;\n  height: 50px;\n  background-color: #1db954;\n`;\n\nconst SignIn = () => {\n  const onButtonClick = () => {\n    // eslint-disable-next-line\n    window.location.href = `${process.env.REACT_APP_API_URL}/auth/connect`;\n  };\n\n  return (\n    <SignInContainer>\n      <Text size={24} weight={700} color=\"white\">\n        {/* eslint-disable-line */}\n        Sign In\n      </Text>\n      <SignInText color=\"grey\">\n        {/* eslint-disable-line */}\n        Discover the event lineup and more!\n      </SignInText>\n      <SignInButton onClick={onButtonClick}>\n        <Text size={18} weight={700}>\n          {/* eslint-disable-line */}\n          Continue with Spotify\n        </Text>\n      </SignInButton>\n    </SignInContainer>\n  );\n};\n\nexport default SignIn;\n","import SignIn from \"./SignIn\";\n\nexport default SignIn;\n","import React from \"react\";\nimport { ApolloProvider } from \"@apollo/react-hooks\";\nimport { BrowserRouter as Router } from \"react-router-dom\";\nimport AppContainer from \"./components/app-container\";\nimport PrivateRoute from \"./components/private-route\";\nimport PublicRoute from \"./components/public-route\";\nimport Home from \"./scenes/home\";\nimport SignIn from \"./scenes/sign-in\";\nimport configureClient from \"./configurations/client\";\n\nconst client = configureClient();\n\nconst App = () => {\n  return (\n    <ApolloProvider client={client}>\n      <AppContainer>\n        <Router>\n          <PrivateRoute exact path=\"/\">\n            <Home />\n          </PrivateRoute>\n          <PublicRoute path=\"/sign-in\">\n            <SignIn />\n          </PublicRoute>\n        </Router>\n      </AppContainer>\n    </ApolloProvider>\n  );\n};\n\nexport default App;\n","import ApolloClient from \"apollo-boost\";\n\nconst configureClient = () =>\n  new ApolloClient({\n    uri: `${process.env.REACT_APP_API_URL}/graphql`,\n    credentials: \"include\",\n  });\n\nexport default configureClient;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"./index.css\";\n\n/* eslint-disable */\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n/* eslint-enable */\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}